#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ejercicio5:server');
var http = require('http');
const database = require('../database');
const { Server } = require("socket.io");

const io = new Server(server);

/*
// Middleware for session
const sessionMiddleware = session({
  secret: "La frase que querais",
  resave: false,
  saveUninitialized: true
});

// Middleware to add session to Socket.IO
io.use((socket, next) => {
  sessionMiddleware(socket.request, socket.request.res, next);
});
*/

io.on('connection', (socket) => {
  console.log('Usuario conectado');

  // Enviar historial de chat al nuevo usuario
  socket.emit('chat history', chatHistory);

  // Manejar evento de chat
  socket.on('chat', (data) => {
      console.log('Mensaje recibido:', data);
      chatHistory.push(data);
      io.emit('chat', data);
  });

  // Manejar desconexiÃ³n de usuario
  socket.on('disconnect', () => {
      console.log('Usuario desconectado');
  });
});

app.use((req, res, next) => {
  const message = req.session.message;
  const error = req.session.error;
  delete req.session.message;
  delete req.session.error;
  res.locals.message = "";
  res.locals.error = "";
  if (message) res.locals.message = `<p>${message}</p>`;
  if (error) res.locals.error = `<p>${error}</p>`;
  next();
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
